// 아래 기본 제공된 코드를 수정 또는 삭제하고 본인이 코드를 사용하셔도 됩니다.
#include <cstdio>
#include <iostream>
#include <string>
#include <string.h>
using namespace std;
 
int room[1000][1000];
int visit[1000][1000];
int N;
 
int solve(string direction, int a, int b);
 
int main(int argc, char** argv) {
 
	setbuf(stdout, NULL);
 
	int TC;
	int test_case;
 
	scanf("%d", &TC);	// cin 사용 가능
	for(test_case = 1; test_case <= TC; test_case++) {
        memset(visit, -1, sizeof(visit));
		//int N;
        cin >> N;
 
        string mirrorType;
        for(int i = 0; i < N; i++) {
            cin >> mirrorType;    // 미러타입을 한줄씩 입력받음.
            for(int j = 0; j < N; j++) {
                room[i][j] = mirrorType[j] - '0';    // 입력받은 미러타입을 하나씩 쪼개서 room 배열에 넣음 (char to int)
                //cout << room[i][j] << endl;
            }
        }
 
        //int ret = -1;
 
        int ret = 0;
        string direction = "left";
        int a = 0;
        int b = 0;
 
        // 범위를 벗어나는 경우 탐색이 끝남.
        // direction은 현재 빛이 방으로 들어오고 있는 방향
        while( 0 <= a && a < N && 0 <= b && b < N )
        {  
            int typeOfMirror = room[a][b];
            int x = a;
            int y = b;
            
            //cout << "typeOfMirror : " << typeOfMirror << endl;
            if( typeOfMirror == 1 ) {
                if( direction == "up"    ) { direction = "right"; b = b-1; }
                else if( direction == "left"  ) { direction = "down"; a = a-1; } 
                else if( direction == "down"  ) { direction = "left"; b = b+1; }
                else if( direction == "right" ) { direction = "up"; a = a+1; }
 
                // 답을 조립함.
                ret = (visit[x][y] != 1) ? 1 + ret : ret;
            }
            else if( typeOfMirror == 2 ) {
                if( direction == "up"    ) { direction = "left"; b = b+1; }
                else if( direction == "left"  ) { direction = "up"; a = a+1; }
                else if( direction == "down"  ) { direction = "right"; b = b-1; }
                else if( direction == "right" ) { direction = "down"; a = a-1; }
 
                // 답을 조립함.
                ret = (visit[x][y] != 1) ? 1 + ret : ret;
            }
            else if( typeOfMirror == 0 ) {
                // keep going
                if( direction == "up"    ) { direction = "up"; a = a+1; }
                else if( direction == "left"  ) { direction = "left"; b = b+1; }
                else if( direction == "down"  ) { direction = "down"; a = a-1; }
                else if( direction == "right" ) { direction = "right"; b = b-1; }
            }
 
         //cout << " ** ret : " << ret << endl;
 
            // 방문했음을 표시
            visit[x][y] = 1;
        }
        //ret = solve("left", 0, 0);
 
 
		// 이 부분에서 정답을 출력하십시오.
		printf("Case #%d\n", test_case);	// cout 사용 가능
        printf("%d\n", ret);
 
 
	}
 
	return 0;	// 정상종료 시 반드시 0을 리턴해야 합니다.
}
 
int solve(string direction, int a, int b)
{
	//cout << direction << ", " << a << ", " << b << endl;
    // 범위를 벗어나는 경우 탐색이 끝남.
    if( a < 0 || a >= N || b < 0 || b >= N ) return 0;
 
 
    int ret = 0;
    int typeOfMirror = room[a][b];
    //cout << "typeOfMirror " << typeOfMirror << endl;
 
 
     // 이미 갔던 곳이면 답에 1을 더하지 않고 그냥 리턴한다.
    int val = -1;
    if( typeOfMirror == 1 ) {
        if( direction == "up"    ) val = solve("right", a, b-1);
        if( direction == "left"  ) val = solve("down", a-1, b); 
        if( direction == "down"  ) val = solve("left", a, b+1);
        if( direction == "right" ) val = solve("up", a+1, b);
 
        // 답을 조립함.
        ret = (visit[a][b] == 1) ? val : 1 + val;
    }
    else if( typeOfMirror == 2 ) {
        if( direction == "up"    ) val = solve("left", a, b+1);
        if( direction == "left"  ) val = solve("up", a+1, b);
        if( direction == "down"  ) val = solve("right", a, b-1);
        if( direction == "right" ) val = solve("down", a-1, b);
 
        // 답을 조립함.
        ret = (visit[a][b] == 1) ? val : 1 + val;
    }
    else if( typeOfMirror == 0 ) {
        // keep going
        if( direction == "up"    ) ret = solve("up"   , a+1, b  );
        if( direction == "left"  ) ret = solve("left" , a  , b+1);
        if( direction == "down"  ) ret = solve("down" , a-1, b  );
        if( direction == "right" ) ret = solve("right", a  , b-1);
    }
 
    //cout << direction << ", " << a << ", " << b  << " ** ret : " << ret << endl;
 
    // 방문했음을 표시
    visit[a][b] = 1;
 
    return ret;  
}
