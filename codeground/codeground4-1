// 아래 기본 제공된 코드를 수정 또는 삭제하고 본인이 코드를 사용하셔도 됩니다.
#include <cstdio>
#include <iostream>
#include <vector>
#include <algorithm>
#define _USE_MATH_DEFINES
#include <math.h>
using namespace std;

int main(int argc, char** argv) {
	/* 아래 freopen 함수는 input.txt 를 read only 형식으로 연 후,
	   앞으로 표준 입력(키보드) 대신 input.txt 파일로 부터 읽어오겠다는 의미의 코드입니다.
	   만약 본인의 PC 에서 테스트 할 때는, 입력값을 input.txt에 저장한 후 freopen 함수를 사용하면,
	   그 아래에서 scanf 함수 또는 cin을 사용하여 표준입력 대신 input.txt 파일로 부터 입력값을 읽어 올 수 있습니다.
	   또한, 본인 PC에서 freopen 함수를 사용하지 않고 표준입력을 사용하여 테스트하셔도 무방합니다.
	   단, Codeground 시스템에서 "제출하기" 할 때에는 반드시 freopen 함수를 지우거나 주석(//) 처리 하셔야 합니다. */
	//freopen("input.txt", "r", stdin);

	setbuf(stdout, NULL);

	int TC;
	int test_case;
    
    const int score[4][10] = {
                                {  6, 13, 13,  4,  4, 18, 18,  1,  1, 20},
                                { 11, 14, 14,  9,  9, 12, 12,  5,  5, 20},
                                { 11,  8,  8, 16, 16,  7,  7, 19, 19,  3},
                                {  6, 10, 10, 15, 15,  2,  2, 17, 17,  3}
                             };    // 4사분면의 점수값을 데이터화함.
    
	scanf("%d", &TC);	// cin 사용 가능
	for(test_case = 1; test_case <= TC; test_case++) {
		// 이 부분에서 알고리즘 프로그램을 작성하십시오.
        
        int bull_end;
        int trp_strt;
        int trp_end;
        int dbl_strt;
        int dbl_end;
        
        scanf("%d", &bull_end);
        scanf("%d", &trp_strt);
        scanf("%d", &trp_end);
        scanf("%d", &dbl_strt);
        scanf("%d", &dbl_end);
        
        int N;
        int x;
        int y;
        
        int ret = 0;
        scanf("%d", &N);
        for(int i = 0; i < N; i++) {
            
            scanf("%d", &x);
            scanf("%d", &y);
                     
            int circle = (x*x) + (y*y);    // x^2 + y^2
            
            //out of board 판정
            if( circle > dbl_end*dbl_end) continue;
            //무조건 bull인 경우
            if( circle <= bull_end*bull_end ) { ret += 50; continue; }
            
            int m = 1;    // single, double, triple 여부 판별
            if      ( trp_strt*trp_strt <= circle && circle <= trp_end*trp_end ) m = 3;
            else if ( dbl_strt*dbl_strt <= circle && circle <= dbl_end*dbl_end ) m = 2;
            
            // x, y축에 존재하는 경우
            if( x == 0 && y > 0 ) { ret += m*20; continue; }
            else if( x == 0 && y < 0 ) { ret += m*3; continue; }
            else if( x > 0 && y == 0 ) { ret += m*6; continue; }
            else if( x < 0 && y == 0 ) { ret += m*11; continue; }
            
            
            // 몇사분면?
            int position = -1;            
            if     ( x > 0 && y > 0 ) position = 1;
            else if( x < 0 && y > 0 ) position = 2;
            else if( x < 0 && y < 0 ) position = 3;
            else if( x > 0 && y < 0 ) position = 4;
                
            // 양수로 만듦
            if ( x < 0 ) x = abs(x);
            if ( y < 0 ) y = abs(y);          
            
                
            // 각도 측정 tan(theta) = y/x
            double theta = atan((double)y/x);    // y를 double형으로 바꾸면 double로 자동 형변환
            theta = theta * (180 / M_PI);    // theta값을 구하기 위한 연산
            
            int val = score[position-1][(int)theta/9];    // 9로 나눈 각도에 따라 점수 배정
            
            
            ret += m*val;
            
        }
        

	// 이 부분에서 정답을 출력하십시오.
	printf("Case #%d\n", test_case);	// cout 사용 가능
        printf("%d\n", ret);	// cout 사용 가능
	}

	return 0;	// 정상종료 시 반드시 0을 리턴해야 합니다.
}
