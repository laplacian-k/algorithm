#include <iostream>

using namespace std;

// variables
int N, M, K;

struct data {
    int y;
    int x;
};

data obt[2002];    // 장애물은 2000개. 시작점과 끝점을 위해 2002개로 사용한다.
long long cache[2002];

const long long MOD = 1000000007;
long long fact[199999];    // 최대 fact[N+M-2]까지 묻는다. 200000-2+1...



// function

// x^n을 빠르게 구하는 함수
long long get_exp(long long x, int n)
{
    //n이 0일 경우 1 리턴
    if(n == 0)
        return 1;
        
    long long val = get_exp(x, n/2);
    val = (val * val) % MOD;
    
    // n이 짝수일 경우
    if(n%2 == 0)
        return val;
    else
        return (x*val) % MOD;
}

// str부터 end까지 가는 경우의 수를 구하는 함수.
long long comb(data str, data end)
{
    int n = end.y - str.y;
    int m = end.x - str.x;
    
    // (n+m)!/(n!*m!)을 구한다.
    // 페르마의 소정리를 이용하여 (n+m)!*(n!*m!)^(p-2) (mod p)를 구한다.
    long long x = (fact[n]*fact[m]) % MOD;
    long long fact_inv = get_exp(x, MOD-2);
    return (fact[n+m]*fact_inv) % MOD;
}

// 장애물을 피해 str부터 end까지 가는 경우의 수를 구하는 함수.
// obt[cur]부터 N, M까지 장애물을 피해서 가는 경우의 수
long long path(int cur)
{
    data str = {obt[cur].y, obt[cur].x};
    data end = {N, M};
    
    long long &ret = cache[cur];
    if(ret != -1)
        return ret;
        
    long long val = comb(str, end);
    long long sum = 0;
    
    for(int i = 1; i <= K; i++) {
        data mid = {obt[i].y, obt[i].x};
        // 장애물의 범위가 str, end 위치에 포함될 때만 장애물로 계산!
        if( (str.y == obt[i].y && str.x == obt[i].x) || (end.y == obt[i].y && end.x == obt[i].x) )
            continue;
        if( (str.y <= obt[i].y && obt[i].y <= end.y) && (str.x <= obt[i].x && obt[i].x <= end.x) ) {
            sum = (sum + (comb(str, mid)*path(i)) % MOD) % MOD;
        }
        
    }
    
    return ret = (val - sum + MOD) % MOD;    // 음수가 될 수 있으므로 MOD로 더해준 후 나눈다.
}

int main(int argc, char** argv)
{
	int T, test_case;cin >> T;
	
	// init fact
	fact[0] = 1;
	for(int i = 1; i < 199999; i++){
	    fact[i] = (i*fact[i-1]) % MOD;
	}
	
	for(test_case = 0; test_case  < T; test_case++)
	{
	    // input
	    cin >> N >> M >> K;
	    for(int i = 1; i < K+1; i++)
	        cin >> obt[i].y >> obt[i].x;
	    // init
	    obt[0] = {1, 1};
	    obt[2001] = {N, M};
	    
	    for(int i = 0; i < 2002; i++)
	        cache[i] = -1;
	  
		long long ret = 0;
		//data str = {1, 1};
		//data end = {N, M};
		
		// 장애물을 피해 str부터 end까지 가는 경우의 수를 구하는 함수.
		//ret = path(str, end);
		ret = path(0);
		
		cout << "Case #" << test_case+1 << endl;
		cout << ret << endl;
	}

	return 0;//Your program should return 0 on normal termination.
}
