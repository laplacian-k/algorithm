#include <iostream>
#include <cmath>    // for abs
#include <string>

using namespace std;

// variables
int N, K;


struct data {
    int y, x;
};

int main(int argc, char** argv)
{
	int T, test_case;
	
	cin >> T;
	for(test_case = 0; test_case  < T; test_case++)
	{
	    cin >> N >> K;
	    string path;
	    cin >> path;    // U, R, D, L
	    
	    // N의 최대값이 100000이므로 미리 방을 만들어 놓을 수 없다.
-	    // memory limit exceed 발생할 것임.
-	    // makeRoom();
-	    // 움직이면서 점수를 계산해야 한다!
	    
	    data cur = {0, 0};    // 현재 좌표
	    data dest = {0, 0};    // 목적 좌표 (점수를 구해야 함.)
	    long long ret = 1;    // 점수의 총합. 
	    long long score = 1;    // 현재의 점수.
	    
	    for(int i = 0; i < K; i++)
	    {
	        char direction = path[i];
	        //cout << direction << endl;
	        // 목적좌표를 구한다.
	        // R, D와 U, L의 이동 방법은 다르다. U, L의 경우는 cur과 dest 좌표를 바꾼 후 같은 로직을 실행. 단 x + len = score(현재)이므로 score-len으로 점수를 구한다. 일반적인 경우는 score + len
	        if(direction == 'R') {
	            dest.y = cur.y;
	            dest.x = cur.x+1;
	        }
	        if(direction == 'D') {
	            dest.y = cur.y+1;
	            dest.x = cur.x;
	        }
	        if(direction == 'U') {
	            dest.y = cur.y-1;
	            dest.x = cur.x;
	        }
	        if(direction == 'L') {
	            dest.y = cur.y;
	            dest.x = cur.x-1;
	        }
	        
	        data temp = {0, 0};    // 임시 변수
	        if(direction == 'U' || direction == 'L') {
	            temp = dest;
	            dest = cur;
	            cur = temp;
	        }
	        //cout << cur.y << ", " << cur.x << endl;
	        //cout << dest.y << ", " << dest.x << endl;
	        
	        long long len = 0;    // 움직이는 거리를 더해간다.
	        
	        // y+x 가 짝수이면 우상향 대각선.
	        bool isUpperRight = ((cur.y + cur.x)%2 == 0) ? true : false;
	        // y+x < N 이면 위쪽 삼각형.
	        bool isUpperTriangle = ((cur.y + cur.x) < N-1) ? true : false; 
	        // 1. 현재 좌표 기준 대각선의 끝점으로 이동.
	        // 2. 다음 대각선으로 한칸 이동
	        if(isUpperRight && isUpperTriangle) {
	            // y = 0으로 투사.
	            len = cur.y;
	            cur.x = cur.y + cur.x;
	            cur.y = 0;
	            // 우로 한칸 이동.
	            len += 1;
	            cur.x += 1;
	        }
	        if(isUpperRight && !isUpperTriangle) {
	            // x = N-1로 투사.
	            len = (N-1)-cur.x;
	            cur.y = cur.y + cur.x - (N-1);
	            cur.x = N-1;
	            // 아래로 한칸 이동.
	            len += 1;
	            cur.y += 1;
	        }
	        if(!isUpperRight && isUpperTriangle) {
	            // x = 0으로 투사.
	            len = cur.x;
	            cur.y = cur.y + cur.x;
	            cur.x = 0;
	            // 아래로 한칸 이동.
	            len += 1;
	            cur.y += 1;
	        }
	        if(!isUpperRight && !isUpperTriangle) {
	            // y = N-1로 투사.
	            len = (N-1)-cur.y;
	            cur.x = cur.y + cur.x - (N-1);
	            cur.y = N-1;
	            // 우로 한칸 이동.
	            len += 1;
	            cur.x += 1;
	        }
	        // 3. 목적 좌표까지 이동. (x좌표를 기준으로 움직인 거리를 계산한다.)
	        len += abs(dest.x - cur.x);
	        // 4. 현재좌표의 점수에서 목적좌표까지 이동한만큼 더해주면 목적좌표의 점수를 구할 수 있음.
	        score = (direction == 'U' || direction == 'L') ? score - len : score + len;
	        //cout << score << endl;
	        // 5. 점수의 총합을 구해나감.
	        ret =  ret + score;
	        
	        // 6. 현재좌표를 목적좌표로 바꿈.
	        cur = dest;
	        // U, L 일 경우 미리 저장해둔 변수를 대입
	        if(direction == 'U' || direction == 'L')
	        cur = temp;
	    }

		
		cout << "Case #" << test_case+1 << endl;
		cout << ret << endl;
	}

	return 0;//Your program should return 0 on normal termination.
}
