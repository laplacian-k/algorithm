// 아래 기본 제공된 코드를 수정 또는 삭제하고 본인이 코드를 사용하셔도 됩니다.
#include <cstdio>
#include <iostream>
using namespace std;

const int MOD = 1000000007;
const int max_size = 2000003;    // (N+M+2)!까지 나타내기 위한 배열 사이즈
unsigned long long factorial[max_size];    // 글로벌로 선언해야 메모리 제한에 안걸린다.

unsigned long long solve(unsigned long long x, int n);    // 거듭제곱을 분할정복으로 구하는 함수

int main(int argc, char** argv) {

	setbuf(stdout, NULL);

	int TC;
	int test_case;
    
    // 1. 이항계수의 성질과, 이항계수의 합에 대한 성질을 이용하면 N+M+2CM+1 - 1을 구해야 함을 알 수 있다.
    // 동적계획법을 사용하기엔 메모리가 부족하다.
    // 따라서 팩토리얼 연산을 생각한다.
    // (N+M+2)! / (M+1)!*(N+1)! (mod 1000000007) 을 구해야 한다.
    // 2. 페르마의 소정리를 이용하면
    // (N+M+2)!*{(M+1)!*(N+1)!}^1000000005 (mod 1000000007) 을 구하는 문제가 된다.
    // 곱셈에 대한 모듈러 연산의 법칙에 의해 A(mod p) * B(mod p)를 구하면 된다.
    // 3. 팩토리얼에 대한 모듈러 연산 값은 최대치만큼 미리 계산해 둔다.
    
    factorial[0] = 1;
    for(int i = 1; i < max_size; i++)
    {
        factorial[i] = (factorial[i-1] * i ) % MOD;
    }
    
	scanf("%d", &TC);	// cin 사용 가능
	for(test_case = 1; test_case <= TC; test_case++) {
        
        int N, M;
        
        scanf("%d", &N);
        scanf("%d", &M);
        
        // 4. A를 구한다. A : (N+M+2)! (mod 1000000007)
        unsigned long long A = factorial[N+M+2];
        
        // 5. B를 구한다. B : {(M+1)!*(N+1)!}^1000000005 (mod 1000000007)
        // 거듭제곱을 빠르게 구하기 위해 분할정복을 사용한다.
        
        unsigned long long x = (factorial[M+1] * factorial[N+1]) % MOD;
        
        unsigned long long B = solve(x, MOD-2);
        
        unsigned long long ret = (A * B) % MOD - 1;
        
		// 이 부분에서 정답을 출력하십시오.
		printf("Case #%d\n", test_case);	// cout 사용 가능
        printf("%llu\n", ret);
	}

	return 0;	// 정상종료 시 반드시 0을 리턴해야 합니다.
}

unsigned long long solve(unsigned long long x, int n)
{
    // x^n를 빠르게 구하는 함수
    if(x == 0) return 0;
    if(n == 1) return x;
    if(n == 0) return 1;
    
    unsigned long long val;
    
    if(n % 2 == 0)     // n이 짝수라면
    {
        val = solve(x, n/2);
        return ( val * val ) % MOD;
    }
    else
    {
        val = solve(x, (n-1)/2);
        return ( ( val * val) % MOD * x ) % MOD;
    }
}
