#include <iostream>
#include <queue>    // for priority queue
using namespace std;

int N, M;
int w[1001][1001];
int dist[1001];
bool visit[1001];
bool ret[1001];

const int inf = 1000000000;

void dijkstra(int fir)
{
    // dist, visit 초기화
    for(int i = 0; i <= N; i++) {
        dist[i] = inf;
        visit[i] = false;
    }
    //visit[fir] = true;
    dist[fir] = 0;
    
    // cur을 기준으로 우선순위큐에 push하는 작업을 시작함.
    priority_queue<pair<int, int> > p;
    // (weight, vertex)
    p.push(make_pair(0, fir));
    while(!p.empty()) {
        pair<int, int> q = p.top();
        int cur = q.second;
        // 방문했음을 표시
        p.pop();
        visit[cur] = true;
        
        for(int next = 1; next <= N; next++) {
            if(cur == next || w[cur][next] == -1 || visit[next])
                continue;
            
            if(dist[next] > dist[cur] + w[cur][next]){
                dist[next] = dist[cur] + w[cur][next];
                // 같은 next에 대해 최소 dist를 구해가는 과정에서 동일한 next를 집어넣게 되는데??
                p.push(make_pair(-dist[next], next));   // weight가 작은 원소를 우선으로 하기 위해 -를 해줌.
            }
            
        }
    }
    // 최단거리를 모두 구하고나서 fee를 낼 수 있는 vertex를 찾는다.
    for(int i = 1; i <= N; i++){
        if(fir == i)
            continue;
        for(int j = 1; j <= N; j++){
            if(w[i][j] == -1)   // 간선이 없다면 생략
                continue;
            // fir to j의 weight가 fir to i + w[i][j]일 경우 fee를 낼 수 있다고 판단!
            if(dist[j] == dist[i] + w[i][j])
                ret[i] = false;
        }
    }
}


int main(int argc, char** argv)
{
	int T, test_case;

	cin >> T;
	for(test_case = 0; test_case  < T; test_case++)
	{
	    // init
	    for(int i = 0; i <= 1000; i++) {
	        for(int j = 0; j <= 1000; j++){
	            w[i][j] = -1;
	            ret[j] = true;
	        }
	    }
	    
	    // input
        cin >> N >> M;
        for(int i = 0; i < M; i++) {
            int from, to, weight;
            cin >> from >> to >> weight;
            w[from][to] = weight;
            w[to][from] = weight;
        }
        
        // dijkstra algorithm
        // 모든 vertex-vertex에 대해 최단거리를 구한다.
        for(int i = 1; i <= N; i++){
            dijkstra(i);
        }
		cout << "Case #" << test_case+1 << endl;
		
		int cnt = 0;
		for(int i = 1; i <= N; i++){
		    if(ret[i])
		        cnt++;
		}
		
		cout << cnt <<" ";
		if(cnt != 0) {
		    for(int i = 1; i <= N; i++) {
		        if(ret[i])
		            cout << i << " ";
		    }
		}
		cout << endl;
	}

	return 0;//Your program should return 0 on normal termination.
}
