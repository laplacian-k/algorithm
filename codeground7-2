#include <iostream>
#include <string.h>    // for memset
using namespace std;
int N;
int A[5001];    // |A[n]| <= 100000
// int B[600001];    // sum of Ai, Aj, Ak -300000 ~ 300000 masking.
int B[400001];    // sum of Ai, Aj : -200000 ~ 200000 masking. A[i] + A[j] = A[n] - A[c]


/*
bool isGoodNum(int n) {
    if(B[n] == 1) return true;
    
    //좋은수라면
    for(int i = 1; i < n; i++) {
        for(int j = 1; j < n; j++) {
            for(int k = 1; k < n; k++) {
                // n+1이 될 경우 중복연산이 존재하지 않는가?
                B[A[i] + A[j] + A[k] + 300000] = 1;    // cache 저장.
                if( A[i] + A[j] + A[k] == A[n])
                    return true;
            }
        }
    }

    return false;
}
*/
bool isGoodNum2(int n) {
    
    // O(N^3) 알고리즘.
    //for(int i = 1; i < n; i++) {
    //    for(int j = 1; j < n; j++) {
    //            B[A[i] + A[j] + 200000] = 1;    // cache 저장.
    //    }
    //}
    
    // O(N^2) 알고리즘.
    // 캐시를 중복으로 계산하지 않음. 순서를 강제해서 A[1] + A[2]를 계산해놓고 A[2] + A[1] 을 다시 계산하는 일이 없게 함.
    // n+1의 경우를 생각했을 때 (n+1, 1~n+1의 경우만 새로 계산해주면 됨. 모든 경우를 계산할 필요가 없음.)
    for(int j = 1; j < n; j++) {
        B[A[n-1] + A[j] + 200000] = 1;
    }
    
    for(int k = 1; k < n; k++){
        if(B[A[n] - A[k] + 200000] == 1) return true;
    }

    return false;
}

int main(int argc, char** argv)
{
	int T, test_case;

	cin >> T;
	for(test_case = 0; test_case  < T; test_case++)
	{
	    memset(B, -1, sizeof(B));
	    cin >> N;
	    
	    // input
	    for(int i = 1; i <= N; i++) {
	        cin >> A[i];
	    }
	    
	    int ret = 0;
	    
	    // 좋은수의 정의에 의해 A[1]은 좋은수가 될 수 없음.
	    // brute force로 생각했을 경우엔 O(N^4)
	    for(int i = 2; i <= N; i++) {
	        // 좋은수 판단.
	        if(isGoodNum2(i)) ret++;
	    }
	    
		cout << "Case #" << test_case+1 << endl;
		cout << ret << endl;
	}

	return 0;//Your program should return 0 on normal termination.
}
