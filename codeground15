#include <iostream>

using namespace std;

// variables
int N, M;
bool fee[1001];
bool visit[1001];
int path[1001][1001];

void solve(int cur)
{
	int cur_weight = 1000000000;
	int to = -1;
	for(int next = 1; next <= N; next++){
		if(cur == next || path[cur][next] == -1 || visit[next])
			continue;
			
		// where is the backtracking?
		if(cur_weight > path[cur][next]) {
			cur_weight = path[cur][next];
			to = next;
		}
	}
	visit[to] = true;
	solve(to);
	visit[to] = false;
}

int main(int argc, char** argv)
{
	int T, test_case;
	
	cin >> T;
	for(test_case = 0; test_case  < T; test_case++)
	{
		// init
		for(int i = 0; i <= 1000; i++)
			for(int j = 0; j <=1000; j++)
				path[i][j] = -1;
		
		// input
        cin >> N >> M;
        for(int i = 0; i < M; i++) {
            int from, to, weight;
            cin >> from >> to >> weight;
            path[from][to] = weight;
        }
        
        // algorithm
        // must be recursion...
        for(int i = 1; i <= N; i++)
            solve(i);
        /*
        for(int i = 1; i <= N; i++){
        	// init visit
        	for(int k = 1; k <= N; k++)
        		visit[k] = false;
        	visit[i] = true;
        	
        	// starting node is not marked
        	int cur_weight = 1000000000;
        	int next = -1;
        	for(int j = 1; j <= N; j++) {
        		if(i == j || path[i][j] == -1 || visit[j])
        			continue;
        		
        		// min weight is selected
        		if(cur_weight > path[i][j]){
        			cur_weight = path[i][j];
        			next = j;
        		}
        		
        	}
        	// middle node must have a fee.
        	fee[next] = true;
        	// visit marking
        	visit[next] = true;
        	
        }
        */
		
		cout << "Case #" << test_case+1 << endl;
		
		for(int i = 1; i <= N; i++ ) {
		    if(!fee[i])
		        cout << i << " ";
		}
	}

	return 0;//Your program should return 0 on normal termination.
}
